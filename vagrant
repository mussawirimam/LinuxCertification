### you can look for the base images through this website:
https://portal.cloud.hashicorp.com/vagrant/discover?query=ubuntu

https://github.com/chef/bento

for creating the static ip and private network with the desired name
Vagrant.configure("2") do |config|
  config.vm.define "server01" do |server01|
  server01.vm.box = "ubuntu/jammy64"
  server01.vm.hostname = "web01"
server01.vm.network "private_network", ip: "192.168.33.11"
end

Vagrant.configure("2") do |config|
  config.vm.define "server01" do |server01|
    server01.vm.box = "ubuntu/jammy64"
    server01.vm.hostname = "web01"
    server01.vm.network "private_network", ip: "192.168.1.21"
  end
end


install vagrant

HashiCorp Cloud Platform

vagrant init ubuntu/jammy64
 
vagrant init <image name>
 
make directory
 
cd into the dir
 
vagrant up
 
vagrant ssh
 
vagrant halt for shutdown

### below is not working
### below is the vagrant file to run the vagrant on the bridged nic adapter 
# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"
  config.vm.network "public_network", bridge: "Ethernet"  # Specify the interface name (like "Ethernet" or "wlan0")

  config.vm.provider "virtualbox" do |vb|
    vb.memory = "8192"
  end
end

# to find your Net adapter
Get-NetAdapter

---------------------------------------------------------------------------------------
TROUBLESHOOT FIXED:
### when on bridge network you will face few chanllenges:
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"

  # Use public network (bridged) with DHCP and specify the network interface (NIC)
  config.vm.network "public_network", type: "dhcp", bridge: "Intel(R) Wi-Fi 6E AX211 160MHz"

  # Provider-specific settings for VirtualBox
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "8192"  # Adjust memory as needed
    vb.cpus = 2         # Adjust CPU count if needed
  end
end

### you will have to run these commands in sequence
PS C:\Users\mussa\ubuntu2> vagrant reload
PS C:\Users\mussa\ubuntu2> vagrant port
PS C:\Users\mussa\ubuntu2> vagrant ssh-config
Host default
  HostName 127.0.0.1
  User vagrant
  Port 2200
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile C:/Users/mussa/ubuntu2/.vagrant/machines/default/virtualbox/private_key    <------------------- this is the location
  IdentitiesOnly yes
  LogLevel FATAL
  PubkeyAcceptedKeyTypes +ssh-rsa
  HostKeyAlgorithms +ssh-rsa
ssh -i C:/Users/mussa/ubuntu2/.vagrant/machines/default/virtualbox/private_key -p 2200 vagrant@127.0.0.1

----------------------------------------------------------------------------------------
VAGRANT FILE ON THE PARALLELS
----------------------------------------------------------------------------------------
# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # Using the bento/ubuntu-22.04 box as it provides a lightweight and up-to-date Ubuntu 22.04 environment.
  config.vm.box = "bento/ubuntu-22.04"
  # config.vm.box_version = "202502.21.0" # Ensure the version exists or remove this line if unnecessary
  config.vm.hostname = "vagrant-ubuntu-22.04"
    config.vm.provider "parallels" do |prl|
      prl.memory = "2048"
      prl.cpus = "1"
  # Disable the default synced folder
  config.vm.synced_folder ".", "/vagrant", disabled: true
    end
   
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  # prl.memory = "2048"
  # prl.cpus = "1"
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
